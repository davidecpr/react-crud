[{"/Users/davide/Desktop/WeBeetle/react-crud/src/App.js":"1","/Users/davide/Desktop/WeBeetle/react-crud/src/index.js":"2","/Users/davide/Desktop/WeBeetle/react-crud/src/components/MiniDrawer.js":"3","/Users/davide/Desktop/WeBeetle/react-crud/src/pages/Category.js":"4","/Users/davide/Desktop/WeBeetle/react-crud/src/components/MyTable.js":"5","/Users/davide/Desktop/WeBeetle/react-crud/src/pages/Manager.js":"6","/Users/davide/Desktop/WeBeetle/react-crud/src/services/Category.js":"7","/Users/davide/Desktop/WeBeetle/react-crud/src/pages/Event.js":"8","/Users/davide/Desktop/WeBeetle/react-crud/src/services/Event.js":"9"},{"size":438,"mtime":1612342574407,"results":"10","hashOfConfig":"11"},{"size":386,"mtime":1612371311911,"results":"12","hashOfConfig":"11"},{"size":5398,"mtime":1612549286749,"results":"13","hashOfConfig":"11"},{"size":9733,"mtime":1612559090614,"results":"14","hashOfConfig":"11"},{"size":3383,"mtime":1612548636040,"results":"15","hashOfConfig":"11"},{"size":11893,"mtime":1612559057792,"results":"16","hashOfConfig":"11"},{"size":854,"mtime":1612557051108,"results":"17","hashOfConfig":"11"},{"size":30176,"mtime":1612559075805,"results":"18","hashOfConfig":"11"},{"size":727,"mtime":1612557121346,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xmmlvb",{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/davide/Desktop/WeBeetle/react-crud/src/App.js",[],"/Users/davide/Desktop/WeBeetle/react-crud/src/index.js",["39","40","41"],"/Users/davide/Desktop/WeBeetle/react-crud/src/components/MiniDrawer.js",["42","43"],"/Users/davide/Desktop/WeBeetle/react-crud/src/pages/Category.js",["44"],"/Users/davide/Desktop/WeBeetle/react-crud/src/components/MyTable.js",["45"],"/Users/davide/Desktop/WeBeetle/react-crud/src/pages/Manager.js",["46","47","48","49"],"import React from 'react'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport axios from 'axios'\nimport MyTable from './../components/MyTable'\nimport { getAllManagers, getManager, editManager, addManager, deleteManager } from './../services/Manager'\n\nclass Manager extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            managers: [],\n            addDialogOpen: false,\n            manager: {\n                name: '',\n                description: '',\n                website: '',\n                email: ''\n            },\n            isEditDialog: false,\n            editManagerId: '',\n            alert: {\n                show: false,\n                message: '',\n                type: 'success'\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.getAllManagers()\n    }\n\n    validateManager() {\n        const { name, description, website, email } = this.state.manager\n\n        if (name === undefined || name === '') {\n            this.setState({\n                alert: {\n                    show: true,\n                    message: 'Il nome è obbligatorio',\n                    type: 'error'\n                }\n            })\n            return false;\n        }\n\n        if (description === undefined || description === '') {\n            this.setState({\n                alert: {\n                    show: true,\n                    message: 'La descrizione è obbligatoria',\n                    type: 'error'\n                }\n            })\n            return false;\n        }\n\n        if (website === undefined || website === '') {\n            this.setState({\n                alert: {\n                    show: true,\n                    message: 'Il sito web è obbligatorio',\n                    type: 'error'\n                }\n            })\n            return false;\n        }\n\n        if (email === undefined || email === '') {\n            this.setState({\n                alert: {\n                    show: true,\n                    message: 'L\\'email è obbligatoria',\n                    type: 'error'\n                }\n            })\n            return false;\n        }\n\n        return true\n    }\n\n    async getAllManagers() {\n        const managers = await getAllManagers()\n        this.setState({\n            managers: managers\n        })\n    }\n\n    async addManager() {\n\n        const { name, description, website, email } = this.state.manager\n\n        if (!this.validateManager()) {\n            return\n        }\n\n        const manager = Object.assign({}, {\n            id: Date.now(),\n            name: name,\n            description: description,\n            website: website,\n            email: email\n        })\n\n        Object.assign(manager, {\n            key: new Date().valueOf()\n        })\n        await axios.post('http://localhost:8001/managers/', manager)\n\n        this.closeDialog()\n        this.getAllManagers()\n        this.setState({\n            alert: {\n                show: true,\n                message: 'Nuovo organizzatore aggiunta con successo',\n                type: 'success'\n            }\n        })\n\n    }\n\n    deleteManager = async (id) => {\n        await deleteManager(id)\n        this.getAllManagers()\n        this.setState({\n            alert: {\n                show: true,\n                message: 'Organizzatore eliminata con successo',\n                type: 'success'\n            }\n        })\n    }\n\n    editManager = async () => {\n        const { name, description, website, email } = this.state.manager\n        const { editManagerId } = this.state\n\n        if (!this.validateManager()) {\n            return\n        }\n\n        const manager = Object.assign({}, {\n            name: name,\n            description: description,\n            website: website,\n            email: email\n        })\n        await editManager(editManagerId, manager)\n        this.closeDialog()\n        this.getAllManagers()\n        this.setState({\n            alert: {\n                show: true,\n                message: 'Categoria modificata con successo',\n                type: 'success'\n            }\n        })\n    }\n\n    handleEditManager = async (id) => {\n        const manager = await getManager(id)\n        this.setState({\n            manager: {\n                name: manager.name,\n                description: manager.description,\n                website: manager.website,\n                email: manager.email\n            },\n            editManagerId: id\n        })\n        this.openDialog(true)\n    }\n\n    closeDialog = () => {\n        this.setState({\n            addDialogOpen: false,\n            manager: {\n                name: '',\n                description: '',\n                website: '',\n                email: ''\n            }\n        })\n    }\n\n    openDialog = (isEditDialog) => {\n        this.setState({\n            addDialogOpen: true,\n            isEditDialog: isEditDialog\n        })\n    }\n\n    render() {\n\n        const columns = [\n            { field: \"name\", headerName: \"Nome\" },\n            { field: \"description\", headerName: \"Descrizione\" },\n            { field: \"website\", headerName: \"Website\" },\n            { field: \"email\", headerName: \"Email\" },\n            { field: \"actions\", headerName: \"Azioni\" }\n        ]\n\n        const {\n            managers,\n            addDialogOpen,\n            isEditDialog\n        } = this.state;\n\n        const {\n            name,\n            description,\n            website,\n            email\n        } = this.state.manager\n\n        return (\n            <React.Fragment>\n                <Button className=\"addButton\" variant=\"contained\" color=\"primary\" onClick={() => this.openDialog(false)}>\n                    Aggiungi organizzatore\n                </Button>\n                <MyTable columns={columns} data={managers} editHandle={this} editHandle={this.handleEditManager} deleteHandle={this.deleteManager} />\n                <Dialog open={addDialogOpen} onClose={this.closeDialog} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">{isEditDialog ? \"Modifica Organizzatore\" : \"Nuovo Organizzatore\"}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            {isEditDialog ? \"Modifica questa categoria\" : \"Inserisci tutti i campi richiesti per aggiungere una nuova categoria.\"}\n                        </DialogContentText>\n                        <form style={{ marginTop: \"50px\" }} onSubmit={isEditDialog ? (this.editManager) : (() => this.addManager())}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        id=\"name\"\n                                        label=\"Nome organizzatore\"\n                                        type=\"text\"\n                                        fullWidth\n                                        value={name}\n                                        onChange={(e => this.setState({\n                                            manager: {\n                                                [e.target.id]: e.target.value,\n                                                description: description,\n                                                website: website,\n                                                email: email\n                                            }\n                                        })\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        id=\"website\"\n                                        label=\"website organizzatore\"\n                                        type=\"text\"\n                                        fullWidth\n                                        value={website}\n                                        onChange={(e => this.setState({\n                                            manager: {\n                                                [e.target.id]: e.target.value,\n                                                name: name,\n                                                description: description,\n                                                email: email\n                                            }\n                                        })\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        id=\"email\"\n                                        label=\"email organizzatore\"\n                                        type=\"email\"\n                                        fullWidth\n                                        value={email}\n                                        onChange={(e => this.setState({\n                                            manager: {\n                                                [e.target.id]: e.target.value,\n                                                name: name,\n                                                description: description,\n                                                website: website,\n\n                                            }\n                                        })\n                                        )}\n                                    />\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        variant=\"outlined\"\n                                        id=\"description\"\n                                        label=\"Descrizione organizzatore\"\n                                        type=\"text\"\n                                        multiline\n                                        rowsMax={4}\n                                        fullWidth\n                                        value={description}\n                                        onChange={(e => this.setState({\n                                            manager: {\n                                                [e.target.id]: e.target.value,\n                                                name: name,\n                                                website: website,\n                                                email: email\n                                            }\n                                        })\n                                        )}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <DialogActions style={{marginTop: \"20px\"}}>\n                                <Button type=\"button\" onClick={this.closeDialog} color=\"primary\">\n                                    Annulla\n                                </Button>\n                                <Button type=\"submit\" color=\"primary\">\n                                    {isEditDialog ? 'Modifica' : 'Aggiungi'}\n                                </Button>\n                            </DialogActions>\n                        </form>\n                    </DialogContent>\n                </Dialog>\n            </React.Fragment>\n        )\n    }\n\n}\n\nexport default Manager;","/Users/davide/Desktop/WeBeetle/react-crud/src/services/Category.js",[],"/Users/davide/Desktop/WeBeetle/react-crud/src/pages/Event.js",["50","51","52"],"/Users/davide/Desktop/WeBeetle/react-crud/src/services/Event.js",[],{"ruleId":"53","severity":1,"message":"54","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":11},{"ruleId":"53","severity":1,"message":"57","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":18},{"ruleId":"53","severity":1,"message":"58","line":6,"column":8,"nodeType":"55","messageId":"56","endLine":6,"endColumn":19},{"ruleId":"53","severity":1,"message":"59","line":18,"column":8,"nodeType":"55","messageId":"56","endLine":18,"endColumn":17},{"ruleId":"53","severity":1,"message":"60","line":31,"column":9,"nodeType":"55","messageId":"56","endLine":31,"endColumn":15},{"ruleId":"53","severity":1,"message":"61","line":13,"column":8,"nodeType":"55","messageId":"56","endLine":13,"endColumn":13},{"ruleId":"53","severity":1,"message":"62","line":9,"column":8,"nodeType":"55","messageId":"56","endLine":9,"endColumn":14},{"ruleId":"53","severity":1,"message":"63","line":10,"column":8,"nodeType":"55","messageId":"56","endLine":10,"endColumn":16},{"ruleId":"53","severity":1,"message":"64","line":11,"column":8,"nodeType":"55","messageId":"56","endLine":11,"endColumn":16},{"ruleId":"53","severity":1,"message":"65","line":14,"column":51,"nodeType":"55","messageId":"56","endLine":14,"endColumn":61},{"ruleId":"66","severity":1,"message":"67","line":232,"column":78,"nodeType":"68","endLine":232,"endColumn":113},{"ruleId":"53","severity":1,"message":"61","line":10,"column":8,"nodeType":"55","messageId":"56","endLine":10,"endColumn":13},{"ruleId":"53","severity":1,"message":"69","line":91,"column":13,"nodeType":"55","messageId":"56","endLine":91,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":267,"column":26,"nodeType":"72","messageId":"73","endLine":267,"endColumn":28},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'Breadcrumbs' is defined but never used.","'InboxIcon' is defined but never used.","'getAll' is defined but never used.","'axios' is defined but never used.","'Button' is defined but never used.","'Snackbar' is defined but never used.","'MuiAlert' is defined but never used.","'addManager' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'streetName' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]